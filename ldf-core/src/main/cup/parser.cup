package ldf.parser.gen;
import ldf.java_cup.runtime.*;
import ldf.parser.ast.*;
import ldf.parser.ast.bnf.*;
import ldf.parser.ast.decl.*;
import ldf.parser.ast.expr.*;
import ldf.parser.ast.stmt.*;

import java.util.*;

/* -------------- Terminals ---------------- */

terminal String  IDENTIFIER;
terminal Number  NUMBER;
terminal Boolean BOOLEAN;

terminal
    STRING_BEGIN, STRING_END, CHAR_BEGIN, CHAR_END;

terminal LiteralString.Fragment
    STRING_FRAGMENT;

/* Keywords: */

terminal
    GRAMMAR, NTERM, WHERE, VAR, DEF,       // declarations
    IF, ELSE, SWITCH, CASE, DEFAULT,       // branching
    FOR, DO, WHILE, BREAK, CONTINUE,       // looping
    RETURN, TRY, CATCH, FINALLY,           // jumps
    NEW;                                   // other

/* Punctuation */

terminal
    COLON, SEMICOLON, COMMA, DOT, AT_SIGN, Q_MARK,    // : ; , . @ ?
    PIPE, /* HAT, */ PLUS, MINUS, TIMES, SLASH, MOD,  // | ~ + - * / %
    PLUS_PLUS, MINUS_MINUS, EXCL, PIPE_PIPE, AMP_AMP, // ++ -- ! || &&
    EQ, EQEQ, NEQ, LT, LTE, GT, GTE,                  // = == != < <= > >=
    COLON_COLON_EQ, ELLIPSIS, EQ_GT;                  // ::=  ... =>

/* Different kinds of parentheses and brackets: */

terminal
    LPAREN, RPAREN,   // ( ... )
    LSQUARE, RSQUARE, // [ ... ]
    LCURLY, RCURLY,   // { ... }
    LCURLY_AT_SIGN,   // {@....}
    LACTION, RACTION, // {: ... :}
    LGUARD, RGUARD;   // {? ... ?}

/* ------------- Non-terminals ------------- */

non terminal AstIdentifier id;

non terminal LiteralString         string_literal;
non terminal LiteralString.Builder string_contents_;

non terminal BnfSyntax          bnf_syntax;
non terminal BnfUnion.Builder   bnf_union;
non terminal BnfConcat.Builder  bnf_concat;
non terminal BnfAbstractAction  bnf_action;
non terminal BnfItem            bnf_item;
non terminal BnfAtom            bnf_atom;
non terminal BnfQuantifier      bnf_quantifier;
non terminal BnfLabel           bnf_label;

non terminal Declaration        decl;
non terminal DeclList           decl_list;
non terminal DeclList.Builder   decl_list_;
non terminal DeclVariable       decl_var__;
non terminal DeclFunction       decl_function;

non terminal DeclGrammar        decl_grammar;

non terminal List<Reference>
    decl_grammar_extend_,
    decl_grammar_extend__;

non terminal DeclNonTerminal decl_nterm;

non terminal DeclWhereClause         decl_nterm_where_;
non terminal DeclWhereClause.Builder decl_nterm_where__;

non terminal StmtList stmt_list;
non terminal StmtList.Builder stmt_list_;

non terminal Statement
    stmt,
    stmt_expr;

non terminal StmtDeclLocalVars          stmt_decl_vars;
non terminal StmtDeclLocalVars.Builder  stmt_decl_vars_;

non terminal StmtBlock              stmt_block;
non terminal StmtSwitch             stmt_switch;
non terminal StmtSwitch.Builder     switch_body_;

non terminal StmtTry                stmt_try;
non terminal StmtTry.Builder        stmt_catch_;

non terminal Statement
    matched, unmatched; //for solving the dangling else problem

non terminal TypeExpression
    type_expr;

non terminal Expression
    expr;

// various expressions, sorter by precedence (low to high)
non terminal ExprCompound.Builder
    expr_1, // assignment       RTL     =
    expr_2, // boolean sum      LTR     ||
    expr_3, // boolean product  LTR     &&
    expr_4, // comparison       LTR     == != < <= > >=
    expr_5, // additive         LTR     + -
    expr_6; // multiplicative   LTR     * / %

non terminal Expression
    expr_7, // secondary        LTR
    expr_8; // primary          RTL

non terminal Reference                  expr_reference;
non terminal Reference.Builder          expr_reference_;

non terminal ExprList                   expr_list;
non terminal ExprList.Builder           expr_list_;

non terminal FormalParamList            formal_params;
non terminal FormalParamList.Builder    formal_params_;

non terminal FormalParam
    formal_params__;

non terminal AstSourceFile main;
non terminal DeclList.Builder grammar_list_;

/* -------------- Productions -------------- */

start with main;

main
    ::= grammar_list_:b
        {:  RESULT = new AstSourceFile(b.build());  :}
    ;

grammar_list_
    ::= grammar_list_:b decl_grammar:gram
        {:  RESULT = b.add(gram); :}

    |   decl_grammar:gram
        {:  RESULT = new DeclList.Builder().add(gram);  :}
    ;

id  ::= IDENTIFIER:id
    {:  RESULT = new AstIdentifier(id); :}
;

/* string literal */
string_literal      // "..."
    ::= STRING_BEGIN string_contents_:builder STRING_END
        {:  RESULT = builder.build(false); :}

    |   CHAR_BEGIN string_contents_:builder CHAR_END
        {:  RESULT = builder.build(true); :}
    ;

string_contents_    // sequence of valid (and invalid) bits of a string
    ::= string_contents_:builder STRING_FRAGMENT:f
        {:  RESULT = builder.add(f);  :}

    |   /* empty */
        {:  RESULT = new LiteralString.Builder();   :}
    ;

/* Declarations */

decl_grammar
    ::= GRAMMAR id:id decl_grammar_extend_:ext
        LCURLY decl_list:decl RCURLY
        {:
            RESULT = new DeclGrammar(id, ext, decl);
        :}
    ;

decl_grammar_extend_
    ::= COLON decl_grammar_extend__:ext
        {:  RESULT = ext;   :}

    |   /* empty */
    ;

decl_grammar_extend__
    ::= decl_grammar_extend__:ext COMMA expr_reference:ref
        {:  (RESULT = ext).add(ref);    :}

    |   expr_reference:ref
        {:
            RESULT = new LinkedList<Reference>();
            RESULT.add(ref);
        :}
    ;

decl_list
    ::= decl_list_:list
        {:  RESULT = list.build();  :}
    ;

decl_list_
    ::= decl_list_:list decl:decl
        {:  RESULT = list.add(decl);  :}

    |   /* empty */
        {:  RESULT = new DeclList.Builder();    :}
    ;

decl
    ::= decl_function:fn    {:  RESULT = fn;    :}
    |   decl_nterm:nterm    {:  RESULT = nterm; :}
    ;

stmt_decl_vars   // var ...;
    ::= VAR stmt_decl_vars_:vars SEMICOLON
        {:  RESULT = vars.build();  :}
    ;

stmt_decl_vars_
    ::= stmt_decl_vars_:vars COMMA decl_var__:var
        {:  RESULT = vars.add(var);   :}

    |   decl_var__:var
        {:  RESULT = new StmtDeclLocalVars.Builder().add(var);  :}
    ;

decl_var__     // identifier [ : type ] [ = expr ]
    ::= id:id
        {:  RESULT = new DeclVariable(id, null, null);  :}

    |   id:id COLON type_expr:t
        {:  RESULT = new DeclVariable(id, t, null);     :}

    |   id:id EQ expr:e
        {:  RESULT = new DeclVariable(id, null, e);     :}

    |   id:id COLON type_expr:t EQ expr:e
        {:  RESULT = new DeclVariable(id, t, e);        :}
    ;

decl_function
    ::= DEF id:id formal_params:args stmt_block:body
        {:  RESULT = new DeclFunction(id, args, null, body);    :}

    |   DEF id:id formal_params:args
        COLON type_expr:type
        stmt_block:body
        {:  RESULT = new DeclFunction(id, args, type, body);    :}

    ;

/* Declarative statements (grammar definition) */

decl_nterm          // nterm id ::= ... [where ...] ;
    ::= NTERM id:id
        COLON_COLON_EQ bnf_syntax:bnf
        decl_nterm_where_:where_clause
        SEMICOLON
        {:
            RESULT = new DeclNonTerminal(id, bnf, where_clause);
        :}
    ;

decl_nterm_where_   // where @id = {: action code :} ...
    ::= WHERE decl_nterm_where__:list
        {:  RESULT = list.build();  :}
    | /* empty */
    ;

decl_nterm_where__
    ::= decl_nterm_where__:list AT_SIGN id:id EQ bnf_action:a
        {:  RESULT = list.add(id, a);  :}

    |   /* empty */
        {:  RESULT = new DeclWhereClause.Builder(); :}
    ;

/* BNF syntax */

bnf_syntax
    ::= bnf_union:root
        {:  RESULT = new BnfSyntax(root.build());   :}
    ;

bnf_union        // a|b|c|... (precedence: 0)
    ::= bnf_union:union PIPE bnf_concat:concat
        {:  RESULT = union.add(concat.build());  :}

    |   bnf_concat:concat
        {:
            RESULT = new BnfUnion.Builder().add(concat.build());
        :}
    ;

bnf_concat        // a b c ... (precedence: 1)
    ::= bnf_concat:concat bnf_item:obj
        {:  RESULT = concat.add(obj);   :}

    |   /* empty */
        {:  RESULT = new BnfConcat.Builder();     :}
    ;

bnf_item
    ::= // label@atom{n,m}
        bnf_label:label bnf_atom:atom bnf_quantifier:quantifier
        {:  RESULT = new BnfItem(label, atom, quantifier);    :}

    |   // atom{n,m}
        bnf_atom:atom bnf_quantifier:quantifier
        {:  RESULT = new BnfItem(null, atom, quantifier);     :}

    |   // label@atom
        bnf_label:label bnf_atom:atom
        {:  RESULT = new BnfItem(label, atom, null);    :}

    |   // atom
        bnf_atom:atom
        {:  RESULT = new BnfItem(null, atom, null);     :}
    ;

bnf_atom
    ::= // String literal
        string_literal:str
        {:  RESULT = str;  :}

        // BNF alternation
    |   LSQUARE bnf_union:e1 COMMA bnf_union:e2 RSQUARE
        {:  RESULT = new BnfAlternation(e1.build(), e2.build());    :}

    |   // a.b.c -- identifies a symbol (can be a fully qualified name)
        expr_reference:ref
        {:  RESULT = ref;  :}

    |   // ( ... ) -- parenthesized sub-expression
        LPAREN bnf_union:union RPAREN
        {:  RESULT = union.build();  :}

    |   bnf_action:a
        {:  RESULT = a; :}
    ;

bnf_action
    ::= // {: ... :} -- action to be executed
        LACTION stmt_list:s RACTION
        {:  RESULT = new BnfAction(s);  :}

    |   // {? ... ?} -- condition to be checked
        LGUARD expr:e RGUARD
        {:  RESULT = new BnfGuard(e);   :}

    |   // {@label} -- placeholder to be expanded in the "where" clause
        LCURLY_AT_SIGN id:id RCURLY
        {:  RESULT = new BnfPlaceholder(id);  :}
    ;

bnf_label
    ::= id:id AT_SIGN
        {:  RESULT = new BnfLabel(id);  :}
;

bnf_quantifier        // used after a bnf_atom to indicate repetition
    ::= TIMES                                   // * = 0 or more
        {:  RESULT = new BnfQuantifier("*", 0, null);     :}

    |   PLUS                                    // + = 1 or more
        {:  RESULT = new BnfQuantifier("+", 1, null);     :}

    |   Q_MARK                                  // ? = 0 or 1
        {:  RESULT = new BnfQuantifier("?", 0, 1);        :}

    |   LCURLY NUMBER:n RCURLY                  // {n}   = exactly n
        {:  RESULT = new BnfQuantifier("{n}", n, n);      :}

    |   LCURLY NUMBER:n COMMA RCURLY            // {n,}  = n or more
        {:  RESULT = new BnfQuantifier("{n,}", n, null);  :}

    |   LCURLY NUMBER:n COMMA NUMBER:m RCURLY   // {n,m} = between n and m
        {:  RESULT = new BnfQuantifier("{n,m}", n, m);    :}

    |   LCURLY COMMA NUMBER:n RCURLY            // {,n}  = n or less
        {:  RESULT = new BnfQuantifier("{,n}", null, n);  :}
    ;

/* Imperative statements (action body) */

stmt_list
    ::= stmt_list_:builder
        {:  RESULT = builder.build();  :}
    ;

stmt_list_
    ::= stmt_list_:builder stmt:s
        {:  RESULT = builder.add(s);    :}

    |   /* empty */
        {:  RESULT = new StmtList.Builder(); :}

    ;

// "matched" and "unmatched" solve the "dangling else" problem
// http://www.cs.man.ac.uk/~pjj/complang/g2lr.html#5
stmt
    ::= matched:s   {:  RESULT = s; :}
    |   unmatched:s {:  RESULT = s; :}
    ;

unmatched
    ::= IF LPAREN expr:i RPAREN stmt:t
        {:  RESULT = new StmtIf(i, t, null);    :}

    |   IF LPAREN expr:i RPAREN matched:t ELSE unmatched:e
        {:  RESULT = new StmtIf(i, t, e);   :}

    /* for-else (syntactic sugar) */
    |   FOR LPAREN
            expr_list:_init SEMICOLON
            expr:_condition SEMICOLON
            expr:_next
        RPAREN stmt:_loop
        {:  RESULT = new StmtFor(_init, _condition, _next, _loop, null); :}

    |   FOR LPAREN
            expr_list:_init SEMICOLON
            expr:_condition SEMICOLON
            expr:_next
        RPAREN  matched:_loop
        ELSE unmatched:_else
        {:  RESULT = new StmtFor(_init, _condition, _next, _loop, _else);:}

    /* while-else (syntactic sugar) */
    |   WHILE LPAREN expr:_if RPAREN stmt:_loop
        {:  RESULT = new StmtWhile(false, _if, _loop, null); :}

    |   WHILE LPAREN expr:_if RPAREN matched:_loop ELSE unmatched:_else
        {:  RESULT = new StmtWhile(false, _if, _loop, _else); :}

    |   id COLON unmatched:s // label: statement
        {:  RESULT = s; :}

    |   ELLIPSIS // dummy statement
    ;

matched
    ::= IF LPAREN expr:i RPAREN matched:t ELSE matched:e
        {:  RESULT = new StmtIf(i, t, e);   :}

    /* for-else (syntactic sugar) */
    |   FOR LPAREN
            expr_list:_init SEMICOLON
            expr:_condition SEMICOLON
            expr:_next
        RPAREN matched:_loop
        ELSE matched:_else
        {:  RESULT = new StmtFor(_init, _condition, _next, _loop, _else);:}

    /* while-else (syntactic sugar) */
    |   WHILE LPAREN expr:_if RPAREN matched:_loop ELSE matched:_else
        {:  RESULT = new StmtWhile(false, _if, _loop, _else); :}

    |   DO stmt:_loop WHILE LPAREN expr:_condition RPAREN SEMICOLON
        {:  RESULT = new StmtWhile(true, _condition, _loop, null); :}

    |   BREAK    SEMICOLON
        {:  RESULT = new StmtBreak(null);   :}

    |   CONTINUE SEMICOLON
        {:  RESULT = new StmtContinue(null);    :}

    |   BREAK    id:id SEMICOLON
        {:  RESULT = new StmtBreak(id);   :}

    |   CONTINUE id:id SEMICOLON
        {:  RESULT = new StmtContinue(id);    :}

    |   RETURN expr:e SEMICOLON
        {:  RESULT = new StmtReturn(e); :}

    |   RETURN SEMICOLON
        {:  RESULT = new StmtReturn(null); :}

    |   stmt_block:s
        {:  RESULT = s;  :}

    |   SEMICOLON
        {:  RESULT = new StmtEmpty(); :}

    |   stmt_expr:s          {:  RESULT = s;  :}
    |   stmt_switch:s        {:  RESULT = s;  :}
    |   stmt_decl_vars:s     {:  RESULT = s;  :}
    |   stmt_try:s           {:  RESULT = s;  :}

    |   id COLON matched:s // label: statement
        {:  RESULT = s; :}

    ;

stmt_block      // { ... code ... }
    ::= LCURLY stmt_list:l RCURLY
        {:  RESULT = new StmtBlock(l);  :}
    ;

stmt_expr       // expr;
    ::= expr:e SEMICOLON
        {:  RESULT = new StmtExpression(e); :}
    ;

stmt_switch     // switch(expr) { ... }
    ::= SWITCH LPAREN expr:e RPAREN LCURLY
            switch_body_:builder
        RCURLY
        {:  RESULT = builder.build(e);    :}
    ;

switch_body_
    ::= switch_body_:builder CASE expr:e COLON
        {:  RESULT = builder.beginCase(e);  :}

    |   switch_body_:builder DEFAULT COLON
        {:  RESULT = builder.beginDefaultCase();  :}

    |   switch_body_:builder stmt:s
        {:  RESULT = builder.addStatement(s); :}

    |   /* empty */
        {:  RESULT = new StmtSwitch.Builder();  :}
    ;

stmt_try
    ::= TRY stmt_block:block stmt_catch_:builder
        {:  RESULT = builder.build(block, null);  :}

    |   TRY stmt_block:block stmt_catch_:builder FINALLY stmt_block:f
        {:  RESULT = builder.build(block, f);  :}
    ;

stmt_catch_
    ::= stmt_catch_:builder
        CATCH LPAREN type_expr:t id:id RPAREN stmt_block:s
        {:  RESULT = builder.addCatch(t, id, s); :}

    |   /* empty */
        {:  RESULT = new StmtTry.Builder();  :}
    ;

/* Type expressions (needs expanding) */

type_expr
    ::= id;

/* Lists: (a, b, c) or (a: int, b: char, c: T) */

formal_params
    ::= LPAREN formal_params_:list RPAREN
        {:  RESULT = list.build();  :}

    |   LPAREN RPAREN
        {:  RESULT = new FormalParamList.Builder().build(); :}
    ;

formal_params_
    ::= formal_params_:list COMMA formal_params__:item
        {:  RESULT = list.add(item);  :}

    |   formal_params__:item
        {:  RESULT = new FormalParamList.Builder().add(item); :}
    ;

formal_params__
    ::= id:id COLON type_expr:t
        {:  RESULT = new FormalParam(id, t);    :}

    |   id:id
        {:  RESULT = new FormalParam(id, null); :}
    ;

expr_list
    ::= expr_list_:list
        {:  RESULT = list.build();  :}

    |   /* empty */
        {:  RESULT = new ExprList();    :}
    ;

expr_list_
    ::= expr_list_:list COMMA expr:item
        {:  (RESULT = list).add(item);  :}

    |   expr:item
        {:  (RESULT = new ExprList.Builder()).add(item);    :}
    ;

/* Expression statements */

expr
    ::= expr_1:e
        {:  RESULT = e.build(); :};

expr_1 // a = b = c = ...
    ::= expr_1:builder EQ expr_2:e
        {:  RESULT = builder.add(BinaryOp.ASSIGN, e); :}

    |   expr_2:e
        {:  RESULT = new ExprCompound.Builder().init(
                BinaryOpClass.ASSIGNMENT, e.build()); :}
    ;

expr_2 // a && b && c && ...
    ::= expr_2:builder PIPE_PIPE  expr_3:e
        {:  RESULT = builder.add(BinaryOp.BOOL_AND, e);      :}

    |   expr_3:e
        {:  RESULT = new ExprCompound.Builder().init(
                BinaryOpClass.BOOL_ADDITIVE, e.build()); :}
    ;

expr_3 // a || b || c || ...
    ::= expr_3:builder AMP_AMP    expr_4:e
        {:  RESULT = builder.add(BinaryOp.BOOL_OR, e);     :}

    |   expr_4:e
        {:  RESULT = new ExprCompound.Builder().init(
                BinaryOpClass.BOOL_MULTIPLICATIVE, e.build());
        :}
    ;

expr_4 // a ? b ? c ? ... (where ? can be ==, !=, <, <=, >, >=)
    ::= expr_4:builder EQEQ expr_5:e
        {:  RESULT = builder.add(BinaryOp.CMP_EQ, e);  :}

    |   expr_4:builder NEQ  expr_5:e
        {:  RESULT = builder.add(BinaryOp.CMP_NEQ, e); :}

    |   expr_4:builder LT   expr_5:e
        {:  RESULT = builder.add(BinaryOp.CMP_LT, e);  :}

    |   expr_4:builder LTE  expr_5:e
        {:  RESULT = builder.add(BinaryOp.CMP_LTE, e); :}

    |   expr_4:builder GT   expr_5:e
        {:  RESULT = builder.add(BinaryOp.CMP_GT, e);  :}

    |   expr_4:builder GTE  expr_5:e
        {:  RESULT = builder.add(BinaryOp.CMP_GTE, e); :}

    |   expr_5:e
        {:  RESULT = new ExprCompound.Builder().init(
                BinaryOpClass.COMPARISON, e.build()); :}
    ;

expr_5 // a ? b ? c ? ... (where ? can be + or -)
    ::= expr_5:builder PLUS  expr_6:e
        {:  RESULT = builder.add(BinaryOp.ALG_ADD, e);     :}

    |   expr_5:builder MINUS expr_6:e
        {:  RESULT = builder.add(BinaryOp.ALG_SUB, e);     :}

    |   expr_6:e
        {:  RESULT = new ExprCompound.Builder().init(
                BinaryOpClass.ADDITIVE, e.build()
            );
        :}
    ;

expr_6 // a ? b ? c ? ... (where ? can be *, / or %)
    ::= expr_6:builder TIMES  expr_7:e
        {:  RESULT = builder.add(BinaryOp.ALG_MUL, e);     :}

    |   expr_6:builder SLASH  expr_7:e
        {:  RESULT = builder.add(BinaryOp.ALG_DIV, e);     :}

    |   expr_6:builder  MOD   expr_7:e
        {:  RESULT = builder.add(BinaryOp.ALG_MOD, e);     :}

    |   expr_7:e
        {:  RESULT = new ExprCompound.Builder().init(
                BinaryOpClass.MULTIPLICATIVE, e); :}
    ;

expr_7
    ::= EXCL         expr_7:e               // negation (!a)
        {:  RESULT = new ExprUnary(UnaryOp.NOT, e); :}

    |   MINUS        expr_7:e               // unary plus (-a)
        {:  RESULT = new ExprUnary(UnaryOp.MINUS, e); :}

    |   PLUS         expr_7:e               // unary minus (+a)
        {:  RESULT = new ExprUnary(UnaryOp.PLUS, e); :}

    |   PLUS_PLUS    expr_7:e               // prefix increment
        {:  RESULT = new ExprIncrement(true, false, e); :}

    |   MINUS_MINUS  expr_7:e               // prefix decrement
        {:  RESULT = new ExprIncrement(false, false, e); :}

    |   DEF formal_params:p EQ_GT expr_7:e  // lambda ...=>{...}
        {:  RESULT = new ExprLambda(p, e);  :}

    |   DEF formal_params:p EQ_GT stmt_block:s      // lambda ...=>(...)
        {:  RESULT = new ExprLambda(p, s);  :}

    |   NEW expr_reference:r LPAREN expr_list:l RPAREN // object creation
        {:  RESULT = new ExprNew(r, l);     :}

    |   expr_8:e
        {:  RESULT = e; :}
    ;

expr_8
    ::= string_literal:s
        {:  RESULT = s; :}

    |   NUMBER:n
        {:  RESULT = new LiteralNumber(n); :}

    |   BOOLEAN:b
        {:  RESULT = new LiteralBoolean(b); :}

    |   id:id
        {:  RESULT = new ExprIdentifier(id);    :}

    |   LPAREN  expr:l RPAREN
        {:  RESULT = l; :}

    |   LSQUARE expr_list:l RSQUARE
        {:  RESULT = new LiteralArray(l);   :}

    |   expr_8:e PLUS_PLUS                    // postfix increment
        {:  RESULT = new ExprIncrement(true, true, e); :}

    |   expr_8:e MINUS_MINUS                  // postfix decrement
        {:  RESULT = new ExprIncrement(false, true, e); :}

    |   expr_8:e DOT id:f             // field access
        {:  RESULT = new ExprFieldAccess(e, f); :}

    |   expr_8:e LSQUARE expr:a RSQUARE       // array access
        {:  RESULT = new ExprArrayAccess(e, a); :}

    |   expr_8:e LPAREN expr_list:p RPAREN    // function call
        {:  RESULT = new ExprFunctionCall(e, p);    :}

    ;

expr_reference
    ::= expr_reference_:builder
        {:  RESULT = builder.build();   :}
    ;

expr_reference_
    ::= expr_reference_:builder DOT id:id
        {:  RESULT = builder.add(id);  :}

    |   id:id
        {:  RESULT = new Reference.Builder().add(id);    :}
    ;
